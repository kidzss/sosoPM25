/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#import "AppDelegate.h"
#import "RCTRootView.h"
#import "TFHpple.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
  NSURL *jsCodeLocation;

  /**
   * Loading JavaScript code - uncomment the one you want.
   *
   * OPTION 1
   * Load from development server. Start the server from the repository root:
   *
   * $ npm start
   *
   * To run on device, change `localhost` to the IP address of your computer
   * (you can get this by typing `ifconfig` into the terminal and selecting the
   * `inet` value under `en0:`) and make sure your computer and iOS device are
   * on the same Wi-Fi network.
   */
//10.0.0.3  10.1.7.21 172.20.2.223
  jsCodeLocation = [NSURL URLWithString:@"http://10.1.7.21:8081/index.ios.bundle?platform=ios&dev=true"];
  /**
   * OPTION 2
   * Load from pre-bundled file on disk. The static bundle is automatically
   * generated by "Bundle React Native code and images" build step.
   */

  // 处理iOS8本地推送不能收到的问题
#ifdef __IPHONE_8_0
  //ios8注册推送
  UIUserNotificationType type = UIUserNotificationTypeBadge | UIUserNotificationTypeAlert | UIUserNotificationTypeSound;
  UIUserNotificationSettings *setting = [UIUserNotificationSettings settingsForTypes:type categories:nil];
  [[UIApplication sharedApplication] registerUserNotificationSettings:setting];
#else
  //register to receive notifications
  UIRemoteNotificationType myTypes = UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound;
  [[UIApplication sharedApplication] registerForRemoteNotificationTypes:myTypes];
#endif
  
  //[self addPm25ScheduleLocalNotification ];  //addPm25ScheduleLocalNotification
  
//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];

  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@"sosoPM2.5"
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  
  return YES;
}

#ifdef __IPHONE_8_0
//ios8需要调用内容
- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings
{
  //register to receive notifications
  [application registerForRemoteNotifications];
}

- (void)application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forRemoteNotification:(NSDictionary *)userInfo completionHandler:(void(^)())completionHandler
{
  //handle the actions
  if ([identifier isEqualToString:@"declineAction"]){
    
  }
  else if ([identifier isEqualToString:@"answerAction"]){
    
  }
}

#endif

- (void)pm25LocalNotification {
  UILocalNotification *notification = [[UILocalNotification alloc] init];
  
  if (notification != nil) {//判断系统是否支持本地通知
    notification.fireDate = [NSDate dateWithTimeIntervalSince1970:120];//本次开启立即执行的周期
    notification.repeatInterval = kCFCalendarUnitDay;//循环通知的周期
    notification.timeZone = [NSTimeZone defaultTimeZone];
    notification.alertBody = @"哇哇哇";//弹出的提示信息
    notification.applicationIconBadgeNumber = 0; //应用程序的右上角小数字
    notification.soundName = UILocalNotificationDefaultSoundName;//本地化通知的声音
    //notification.alertAction = NSLocalizedString(@"美女呀", nil);  //弹出的提示框按钮
    notification.hasAction = NO;
    [[UIApplication sharedApplication] scheduleLocalNotification:notification];
  }
}

// 接收本地推送（AppDelegate.m中添加）
- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification{
  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"标题" message:notification.alertBody delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil];
  [alert show];
  
  // 图标上的数字减1
  application.applicationIconBadgeNumber -= 1;
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
  // 直接打开app时，图标上的数字清零
  application.applicationIconBadgeNumber = 0;
}

- (void)addLocalNotification {
  //定义本地通知对象
  UILocalNotification *notification = [[UILocalNotification alloc]init];
  //设置调用时间
  notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:10.0];//通知触发的时间，10s以后
  notification.repeatInterval = 2;//通知重复次数
  //notification.repeatCalendar=[NSCalendar currentCalendar];//当前日历，使用前最好设置时区等信息以便能够自动同步时间
  
  //设置通知属性
  notification.alertBody = @"最近添加了诸多有趣的特性，是否立即体验？"; //通知主体
  notification.applicationIconBadgeNumber=1;//应用程序图标右上角显示的消息数
  notification.alertAction=@"打开应用"; //待机界面的滑动动作提示
  notification.alertLaunchImage=@"Default";//通过点击通知打开应用时的启动图片,这里使用程序启动图片
  //notification.soundName=UILocalNotificationDefaultSoundName;//收到通知时播放的声音，默认消息声音
  notification.soundName=@"msg.caf";//通知声音（需要真机才能听到声音）
  
  //设置用户信息
  notification.userInfo=@{@"id":@1,@"user":@"Kenshin Cui"};//绑定到通知上的其他附加信息
  
  //调用通知
  [[UIApplication sharedApplication] scheduleLocalNotification:notification];
}

// 进行推送的方法
// 设置本地推送参数，并进行推送
- (void)scheduleNotification {
  UILocalNotification *notification = [[UILocalNotification alloc] init];
  //设置5秒之后
  NSDate *pushDate = [NSDate dateWithTimeIntervalSinceNow:5];
  if (notification != nil) {
    // 设置推送时间（5秒后）
    notification.fireDate = pushDate;
    // 设置时区（此为默认时区）
    notification.timeZone = [NSTimeZone defaultTimeZone];
    // 设置重复间隔（默认0，不重复推送）
    notification.repeatInterval = 0;
    // 推送声音（系统默认）
    notification.soundName = UILocalNotificationDefaultSoundName;
    // 推送内容
    notification.alertBody = @"推送主体内容";
    //显示在icon上的数字
    notification.applicationIconBadgeNumber = 1;
    //设置userinfo 方便在之后需要撤销的时候使用
    NSDictionary *info = [NSDictionary dictionaryWithObject:@"name"forKey:@"key"];
    notification.userInfo = info;
    //添加推送到UIApplication
    UIApplication *app = [UIApplication sharedApplication];
    [app scheduleLocalNotification:notification];
  }
}

- (void)getPm25Html:(NSString*)url {
  NSURL *lurl = [NSURL URLWithString:url];
  NSURLRequest *request = [[NSURLRequest alloc]initWithURL:lurl cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:2000];
  NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];
  [connection start];
  NSLog(@"coo %@",connection);
}

//接收到服务器回应的时候调用此方法

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
  NSHTTPURLResponse *res = (NSHTTPURLResponse *)response;
  NSLog(@"%@",[res allHeaderFields]);
  self.receiveData = [NSMutableData data];
}

//接收到服务器传输数据的时候调用，此方法根据数据大小执行若干次
- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
  [self.receiveData appendData:data];
}

- (void)parseDataPm25Html:(NSMutableData*)htmlData {
  
  TFHpple *doc = [TFHpple hppleWithHTMLData:htmlData encoding:@"UTF8"];
//  TFHppleElement *city = [doc peekAtSearchWithXPathQuery:@"//div[@class='city_name']/h2"];
//  TFHppleElement *level = [doc peekAtSearchWithXPathQuery:@"//div[@class='level']/h4"];
//  TFHppleElement *uptime = [doc peekAtSearchWithXPathQuery:@"//div[@class='live_data_time']/p"];
//  TFHppleElement *unit = [doc peekAtSearchWithXPathQuery:@"//div[@class='live_data_unit']"];
  NSArray *caption = [doc searchWithXPathQuery:@"//div[@class='container']/div[@class='c_item']/h3"];
  NSArray *value = [doc searchWithXPathQuery:@"//div[@class='container']/div[@class='c_item']/p"];
  NSMutableArray *captionStr = [NSMutableArray array];
  NSMutableArray *val = [NSMutableArray array];
  
  for (id item in caption) {
    TFHppleElement* firstChild =[(TFHppleElement *)item firstChild];
    [captionStr addObject:[(NSString*)firstChild.content stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];
  }
  
  for (id itemv in value) {
    TFHppleElement* firstChild =[(TFHppleElement *)itemv firstChild];
    [val addObject:[(NSString*)firstChild.content stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];
  }
  
//  NSString *lblAqi = [NSString stringWithFormat:@"%@ %@",val[0],captionStr[0]];
  NSString *pm25 = [NSString stringWithFormat:@"%@\n%@",captionStr[0],val[0]];
  NSString *tips = [NSString stringWithFormat:@"%@\n%@",captionStr[1],val[1]];
//  NSString *Pm10 = [NSString stringWithFormat:@"%@ %@",val[2],captionStr[2]];
//  NSString *Co = [NSString stringWithFormat:@"%@ %@",val[3],captionStr[3]];
  
//  NSString *lblNo2 = [NSString stringWithFormat:@"%@ %@",val[4],captionStr[4]];
//  NSString *lblO31 = [NSString stringWithFormat:@"%@ %@",val[5],captionStr[5]];
//  NSString *lblO38 = [NSString stringWithFormat:@"%@ %@",val[6],captionStr[6]];
//  NSString *lblSo2 = [NSString stringWithFormat:@"%@ %@",val[7],captionStr[7]];
  
//  NSString *pollutant = [[[[doc peekAtSearchWithXPathQuery:@"//div[@class='primary_pollutant']/p"] firstChild].content stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@" " withString:@""];
//  
//  NSString *affect = [[[[doc peekAtSearchWithXPathQuery:@"//div[@class='affect']/p"] firstChild].content stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@" " withString:@""];
//  
//  NSString *action = [[[[doc peekAtSearchWithXPathQuery:@"//div[@class='action']/p"] firstChild].content stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@" " withString:@""];
}

- (void)addPm25ScheduleLocalNotification:(NSString*)pushStr {
  [[UIApplication sharedApplication] cancelAllLocalNotifications];
  //清空 icon数量
  [UIApplication sharedApplication].applicationIconBadgeNumber = 0;
  //启动本地通知
  UILocalNotification *notification = [[UILocalNotification alloc] init];
  if (notification != nil) {
    //现在的时间
    NSDate *now = [NSDate date];
    
    //获得系统日期
    NSCalendar *cal = [NSCalendar currentCalendar];
    NSUInteger unitFlags = NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear;
    NSDateComponents *conponent = [cal components:unitFlags fromDate:now];
    NSInteger year = [conponent year];
    NSInteger month = [conponent month];
    NSInteger day = [conponent day];
    
    //获得当天的7:30  时间
    NSString *nsStringDate12 = [NSString stringWithFormat:@"%ld-%ld-%ld-%d-%d-%d",
                                (long)year,(long)month,(long)day,7,30,0];
    
    //根据时间字符串获得NSDate
    NSDateFormatter *dateformatter = [[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"YYYY-MM-dd-HH-mm-ss"];
    NSDate *todayTwelve = [dateformatter dateFromString:nsStringDate12];
    
    //然后比较  now跟  todayTwelve那个大，如果已经过了12点，那就设置明天12点
    NSComparisonResult dateResult = [now compare:todayTwelve];
    if (dateResult == NSOrderedDescending) {
      NSDate  *  tomorrowTwelve = [todayTwelve dateByAddingTimeInterval: 24 * 60 * 60];
      notification.fireDate =  tomorrowTwelve;
    } else {
      notification.fireDate= todayTwelve;
    }
    
    notification.repeatInterval = kCFCalendarUnitDay;
    notification.timeZone = [NSTimeZone defaultTimeZone];
    notification.applicationIconBadgeNumber = 1;
    
    notification.alertBody = pushStr;
    notification.alertAction = @"打开";
    [[UIApplication sharedApplication] scheduleLocalNotification:notification];
  }
}

//数据传完之后调用此方法
- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
  //NSString *receiveStr = [[NSString alloc]initWithData:self.receiveData encoding:NSUTF8StringEncoding];
  //NSLog(@"%@",receiveStr);
  
  [self parseDataPm25Html:self.receiveData];
}

//网络请求过程中，出现任何错误（断网，连接超时等）会进入此方法
- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
  NSLog(@"%@",[error localizedDescription]);
}

@end
